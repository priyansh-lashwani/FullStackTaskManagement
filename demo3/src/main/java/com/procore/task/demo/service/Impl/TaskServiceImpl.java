package com.procore.task.demo.service.Impl;

import com.procore.task.demo.model.Task;
import com.procore.task.demo.repository.TaskRepository;
import com.procore.task.demo.service.TaskService;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;

@Service
public class TaskServiceImpl implements TaskService {

    // The repository will be injected by Spring
    private final TaskRepository taskRepository;

    // Use constructor injection (this is a best practice)
    public TaskServiceImpl(TaskRepository taskRepository) {
        this.taskRepository = taskRepository;
    }

    @Override
    public List<Task> findAll() {
        // Delegate the call to the repository
        return taskRepository.findAll();
    }

    @Override
    public Task createTask(Task task) {
        // Remove manual ID setting. Let JPA/Hibernate handle it.
        // task.setId(nextId++); // <-- REMOVE THIS LINE

        // Save the task and return the saved entity.
        // The returned object will have the ID generated by the database.
        return taskRepository.save(task);
    }

    @Override
    public boolean updateTask(Long id,Task updatedTask) {
        Optional<Task> taskOptional = taskRepository.findById(id);
        if (taskOptional.isPresent()) {
            Task existingTask = taskOptional.get();
            existingTask.setTitle(updatedTask.getTitle());
            existingTask.setDescription(updatedTask.getDescription());
            existingTask.setAssignee(updatedTask.getAssignee());
            existingTask.setDueDate(updatedTask.getDueDate());
            taskRepository.save(existingTask);
            return true;
        }
        return false;
    }

    @Override
    public boolean deleteTask(Long id) {
        // Check if the task exists before trying to delete it.
        if (!taskRepository.existsById(id)) {
            return false; // Indicate that the task was not found.
        }
        taskRepository.deleteById(id);
        return true; // Indicate successful deletion.
    }
}
