# Stage 1: Build the React application
# This stage uses a Node.js image to install dependencies and build the static assets.
FROM node:18-alpine AS build

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json to leverage Docker layer caching
COPY package*.json ./

# Install project dependencies
RUN npm install

# Copy the rest of the application source code
COPY . .

# Build the application for production
RUN npm run build


# Stage 2: Serve the application with Nginx
# This stage uses a lightweight Nginx image to serve the static files.
FROM nginx:stable-alpine

# Copy the built assets from the 'build' stage to the Nginx public directory
COPY --from=build /app/build /usr/share/nginx/html

# Expose port 80 to the Docker host. Nginx listens on this port by default.
EXPOSE 80

# The default command for the nginx image already starts the server.
# This command ensures Nginx runs in the foreground, which is required for containers.
CMD ["nginx", "-g", "daemon off;"]